version: '3'

services:

  postgres:
    container_name: postgres
    image: postgres:17.0-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-core}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - '5432:5432'
    expose:
      - '5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:8.0.0
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres']
      interval: 10s
      timeout: 5s
      retries: 5




  redis:
    container_name: redis
    image: redis:7.4.1-alpine3.20
    ports:
      - '6379'
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ./docker
      dockerfile: Dockerfile.app
    container_name: app
    ports:
      - '3005:3005'
    environment:
      - PORT=3005
      - NODE_ENV=production
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/health']
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  sqlserver:
    driver: local
  postgres_data:
    driver: local
  postgres_backup:
    driver: local
  mongodb_data_container:
    driver: local
